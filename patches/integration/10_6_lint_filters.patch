diff --git a/src/js/cosmetic-filtering.js b/src/js/cosmetic-filtering.js
index 66e24097..1e3f17c3 100644
--- a/src/js/cosmetic-filtering.js
+++ b/src/js/cosmetic-filtering.js
@@ -374,7 +374,7 @@ FilterContainer.prototype.compile = function(parsed, writer) {
         this.compileSpecificSelector(hostname, parsed, writer);
     }
     if ( applyGlobally ) {
-        this.compileGenericSelector(parsed, writer);
+        this.compileGenericSelector(parsed, writer, true);
     }
 
     return true;
@@ -382,9 +382,13 @@ FilterContainer.prototype.compile = function(parsed, writer) {
 
 /******************************************************************************/
 
-FilterContainer.prototype.compileGenericSelector = function(parsed, writer) {
+FilterContainer.prototype.compileGenericSelector = function(
+    parsed,
+    writer,
+    nanoIsGlobal
+) {
     if ( parsed.exception === false ) {
-        this.compileGenericHideSelector(parsed, writer);
+        this.compileGenericHideSelector(parsed, writer, nanoIsGlobal);
     } else {
         this.compileGenericUnhideSelector(parsed, writer);
     }
@@ -394,7 +398,8 @@ FilterContainer.prototype.compileGenericSelector = function(parsed, writer) {
 
 FilterContainer.prototype.compileGenericHideSelector = function(
     parsed,
-    writer
+    writer,
+    nanoIsGlobal
 ) {
     const selector = parsed.suffix;
     const type = selector.charCodeAt(0);
@@ -445,6 +450,13 @@ FilterContainer.prototype.compileGenericHideSelector = function(
             type: 'error',
             text: `Invalid generic cosmetic filter in ${who}: ##${selector}`
         });
+        if ( compiled === undefined ) {
+            nano.flinte('nano_l_filter_bad_selector');
+        } else if ( nanoIsGlobal === true ) {
+            nano.flintw('nano_l_filter_converted_to_exception');
+        } else {
+            nano.flinte('nano_l_filter_too_expensive');
+        }
         return;
     }
 
@@ -501,6 +513,7 @@ FilterContainer.prototype.compileGenericUnhideSelector = function(
             type: 'error',
             text: `Invalid cosmetic filter in ${who}: #@#${parsed.suffix}`
         });
+        nano.flinte('nano_l_filter_bad_selector');
         return;
     }
 
@@ -535,6 +548,7 @@ FilterContainer.prototype.compileSpecificSelector = function(
             type: 'error',
             text: `Invalid cosmetic filter in ${who}: ##${parsed.suffix}`
         });
+        nano.flinte('nano_l_filter_bad_selector');
         return;
     }
 
diff --git a/src/js/html-filtering.js b/src/js/html-filtering.js
index e9e06982..8c800b00 100644
--- a/src/js/html-filtering.js
+++ b/src/js/html-filtering.js
@@ -308,6 +308,7 @@
                 type: 'error',
                 text: `Invalid HTML filter in ${who}: ##${selector}`
             });
+            nano.flinte('nano_l_filter_bad_selector');
             return;
         }
 
@@ -317,7 +318,10 @@
         // TODO: Mind negated hostnames, they are currently discarded.
 
         for ( const hn of parsed.hostnames ) {
-            if ( hn.charCodeAt(0) === 0x7E /* '~' */ ) { continue; }
+            if ( hn.charCodeAt(0) === 0x7E /* '~' */ ) {
+                nano.flintw('nano_l_filter_negated_html_filtering');
+                continue;
+            }
             let kind = 0;
             if ( parsed.exception ) {
                 kind |= 0b01;
diff --git a/src/js/redirect-engine.js b/src/js/redirect-engine.js
index 4037300e..958853a0 100644
--- a/src/js/redirect-engine.js
+++ b/src/js/redirect-engine.js
@@ -425,7 +425,13 @@ RedirectEngine.prototype.fromCompiledRule = function(line) {
 
 RedirectEngine.prototype.compileRuleFromStaticFilter = function(line) {
     const matches = this.reFilterParser.exec(line);
-    if ( matches === null || matches.length !== 4 ) { return; }
+    if ( matches === null || matches.length !== 4 ) {
+        nano.flintw(
+            'nano_r_does_not_match_re',
+            ['{{regexp}}', this.reFilterParser.toString()]
+        );
+        return;
+    }
 
     const des = matches[1] || '';
 
@@ -487,14 +493,20 @@ RedirectEngine.prototype.compileRuleFromStaticFilter = function(line) {
         }
         // One and only one type must be specified.
         if ( this.supportedTypes.has(option) ) {
-            if ( type !== undefined ) { return; }
+            if ( type !== undefined ) {
+                nano.flintw('nano_r_too_many_types');
+                return;
+            }
             type = this.supportedTypes.get(option);
             continue;
         }
     }
 
     // Need a resource token.
-    if ( redirect === '' ) { return; }
+    if ( redirect === '' ) {
+        nano.flintw('nano_r_no_resource_token');
+        return;
+    }
 
     // Need one single type -- not negated.
     if ( type === undefined ) {
@@ -503,6 +515,7 @@ RedirectEngine.prototype.compileRuleFromStaticFilter = function(line) {
         } else if ( redirect === 'noopmp4-1s' ) {
             type = 'media';
         } else {
+            nano.flintw('nano_r_no_supported_type');
             return;
         }
     }
@@ -518,12 +531,19 @@ RedirectEngine.prototype.compileRuleFromStaticFilter = function(line) {
     const out = [];
     for ( const srchn of srchns ) {
         if ( srchn === '' ) { continue; }
-        if ( srchn.startsWith('~') ) { continue; }
+        if ( srchn.startsWith('~') ) {
+            nano.flintw('nano_r_negated_domain');
+            continue;
+        }
         out.push(`${srchn}\t${deshn}\t${type}\t${pattern}\t${redirect}`);
     }
 
-    if ( out.length === 0 ) { return; }
+    if ( out.length === 0 ) {
+        nano.flintw('nano_r_no_destination');
+        return;
+    }
 
+    nano.fl.lint(nano.flintable.ResRedirect, redirect);
     return out;
 };
 
diff --git a/src/js/scriptlet-filtering.js b/src/js/scriptlet-filtering.js
index e58e0df9..eab9ff9b 100644
--- a/src/js/scriptlet-filtering.js
+++ b/src/js/scriptlet-filtering.js
@@ -297,12 +297,15 @@
 
         // Tokenless is meaningful only for exception filters.
         if ( normalized === '+js()' && parsed.exception === false ) {
+            nano.flinte('nano_l_filter_generic_js_in_block');
             return;
         }
 
         if ( parsed.hostnames.length === 0 ) {
             if ( parsed.exception ) {
                 writer.push([ 32, '', 1, normalized ]);
+            } else {
+                nano.flinte('nano_l_filter_too_expensive');
             }
             return;
         }
@@ -312,8 +315,10 @@
             !nano.cf.is_privileged &&
             nanoInjectArgs.startsWith(nano.privileged_assets_previx)
         ) {
+            nano.flinte('nano_l_filter_assets_access_violation');
             return;
         }
+        nano.fl.lint(nano.flintable.ResScriptInject, nanoInjectArgs);
 
         // https://github.com/gorhill/uBlock/issues/3375
         //   Ignore instances of exception filter with negated hostnames,
@@ -326,7 +331,10 @@
             }
             let kind = 0;
             if ( parsed.exception ) {
-                if ( negated ) { continue; }
+                if ( negated ) {
+                    nano.flintw('nano_l_filter_script_snippet_double_exception');
+                    continue;
+                }
                 kind |= 1;
             } else if ( negated ) {
                 kind |= 1;
diff --git a/src/js/static-ext-filtering.js b/src/js/static-ext-filtering.js
index 1c2aab1a..b2704d8f 100644
--- a/src/js/static-ext-filtering.js
+++ b/src/js/static-ext-filtering.js
@@ -885,14 +885,20 @@
         let cCode = raw.charCodeAt(rpos - 1);
         if ( cCode !== 0x23 /* '#' */ && cCode !== 0x40 /* '@' */ ) {
             // Adguard's scriptlet injection: not supported.
-            if ( cCode === 0x25 /* '%' */ ) { return true; }
+            if ( cCode === 0x25 /* '%' */ ) {
+                nano.flinte('nano_l_filter_ag_js_injection');
+                return true;
+            }
             if ( cCode === 0x3F /* '?' */ && anchorLen > 2 ) {
                 cCode = raw.charCodeAt(rpos - 2);
             }
             // Adguard's style injection: translate to uBO's format.
             if ( cCode === 0x24 /* '$' */ ) {
                 suffix = translateAdguardCSSInjectionFilter(suffix);
-                if ( suffix === '' ) { return true; }
+                if ( suffix === '' ) {
+                    nano.flinte('nano_l_filter_style_injection_syntax_error');
+                    return true;
+                }
                 parsed.suffix = suffix;
             }
         }
@@ -915,6 +921,7 @@
                 suffix = parsed.suffix = '+js' + suffix.slice(13);
             } else if ( suffix.startsWith('script:contains') ) {
                 suffix = parsed.suffix = '^script:has-text' + suffix.slice(15);
+                nano.flintw('nano_l_filter_script_contains');
             }
         }
 
@@ -931,6 +938,9 @@
         //       filtering syntax.
         if ( c0 === 0x5E /* '^' */ ) {
             Âµb.htmlFilteringEngine.compile(parsed, writer);
+            if ( nano.ub.canFilterResponseData === false ) {
+                nano.flintw('nano_l_html_filtering_not_supported');
+            }
             return true;
         }
 
diff --git a/src/js/static-net-filtering.js b/src/js/static-net-filtering.js
index bc511f72..75372ee4 100644
--- a/src/js/static-net-filtering.js
+++ b/src/js/static-net-filtering.js
@@ -2287,6 +2287,7 @@ const FilterParser = class {
                 this.domainOpt = this.parseHostnameList(opt.slice(7));
                 if ( this.domainOpt === '' ) {
                     this.unsupported = true;
+                    nano.flinte('nano_l_filter_bad_domain_option_arguments');
                     break;
                 }
                 continue;
@@ -2295,6 +2296,7 @@ const FilterParser = class {
                 this.denyallow = this.parseHostnameList(opt.slice(10));
                 if ( this.denyallow === '' ) {
                     this.unsupported = true;
+                    nano.flinte('nano_l_filter_bad_denyallow_option_arguments');
                     break;
                 }
                 continue;
@@ -2306,6 +2308,7 @@ const FilterParser = class {
             if ( /^redirect(?:-rule)?=/.test(opt) ) {
                 if ( this.redirect !== 0 ) {
                     this.unsupported = true;
+                    nano.flinte('nano_r_redirected_twice');
                     break;
                 }
                 this.redirect = opt.charCodeAt(8) === 0x3D /* '=' */ ? 1 : 2;
@@ -2332,6 +2335,7 @@ const FilterParser = class {
             if ( opt === 'empty' || opt === 'mp4' ) {
                 if ( this.redirect !== 0 ) {
                     this.unsupported = true;
+                    nano.flinte('nano_r_redirected_twice');
                     break;
                 }
                 this.redirect = 1;
@@ -2355,12 +2359,24 @@ const FilterParser = class {
             }
             // Unrecognized filter option: ignore whole filter.
             this.unsupported = true;
+            if (
+                opt.startsWith('csp=') &&
+                (
+                    opt.length === 4 ||
+                    this.reBadCSP.test(opt)
+                )
+            ) {
+                nano.flinte('nano_l_filter_bad_csp_option_arguments');
+            } else {
+                nano.flinte('nano_l_filter_unknown_option', ['{{option}}', opt]);
+            }
             break;
         }
 
         // Redirect rules can't be exception filters.
         if ( this.redirect !== 0 && this.action !== BlockAction ) {
             this.unsupported = true;
+            nano.flinte('nano_r_redirect_in_exception');
         }
 
         // Negated network types? Toggle on all network type bits.
@@ -2372,6 +2388,7 @@ const FilterParser = class {
             this.typeBits &= ~this.notTypes;
             if ( this.typeBits === 0 ) {
                 this.unsupported = true;
+                nano.flinte('nano_l_filter_no_type');
             }
         }
 
@@ -2382,6 +2399,9 @@ const FilterParser = class {
             this.typeBits &= ~unsupportedTypeBit;
             if ( this.typeBits === 0 ) {
                 this.unsupported = true;
+                nano.flinte('nano_l_filter_only_unsupported_type');
+            } else {
+                nano.flintw('nano_l_filter_unsupported_type_ignored');
             }
         }
     }
@@ -2403,6 +2423,7 @@ const FilterParser = class {
         // as unsupported.
         if ( s.length === 1 && /[0-9a-z]/i.test(s) ) {
             this.unsupported = true;
+            nano.flinte('nano_l_filter_too_short');
             return this;
         }
 
@@ -2421,6 +2442,7 @@ const FilterParser = class {
             if ( c === '#' || c === '@' ) {
                 console.error('static-net-filtering.js > unexpected cosmetic filters');
                 this.invalid = true;
+                nano.flinte('nano_b_cosmetic_filter_passed_through');
                 return this;
             }
         }
@@ -2450,6 +2472,7 @@ const FilterParser = class {
                 //   Discard Adguard-specific `$$` filters.
                 if ( s.indexOf('$$') !== -1 ) {
                     this.unsupported = true;
+                    nano.flinte('nano_l_filter_ag_element_remove');
                     return this;
                 }
                 this.parseOptions(s.slice(pos + 1).trim());
@@ -2472,6 +2495,7 @@ const FilterParser = class {
             this.f = this.normalizeRegexSource(this.f);
             if ( this.f === '' ) {
                 this.unsupported = true;
+                nano.flinte('nano_l_filter_bad_re');
             }
             return this;
         }
@@ -2495,6 +2519,7 @@ const FilterParser = class {
             // https://github.com/chrisaljoudi/uBlock/issues/1096
             if ( s.startsWith('^') ) {
                 this.unsupported = true;
+                nano.flinte('nano_l_filter_intervention_smed79');
                 return this;
             }
 
@@ -2548,6 +2573,7 @@ const FilterParser = class {
         //       used.
         else if ( this.redirect !== 0 && s === '/' ) {
             s = '*';
+            nano.flintw('nano_r_simplified_to_star');
         }
 
         // https://github.com/gorhill/uBlock/issues/1047
@@ -2567,6 +2593,7 @@ const FilterParser = class {
 
         if ( s.length > 1024 ) {
             this.unsupported = true;
+            nano.flinte('nano_l_filter_matcher_too_long');
             return this;
         }
 
diff --git a/src/js/storage.js b/src/js/storage.js
index 92f6fb2c..e21a9f34 100644
--- a/src/js/storage.js
+++ b/src/js/storage.js
@@ -365,7 +365,11 @@ self.addEventListener('hiddenSettingsChanged', ( ) => {
     // https://github.com/gorhill/uBlock/issues/1022
     //   Be sure to end with an empty line.
     content = content.trim();
-    if ( content !== '' ) { content += '\n'; }
+    if ( content !== '' ) {
+        content += '\n';
+    } else {
+        nano.fl.clear_result();
+    }
     this.removeCompiledFilterList(this.userFiltersPath);
     return this.assets.put(this.userFiltersPath, content);
 };
@@ -797,6 +801,12 @@ self.addEventListener('hiddenSettingsChanged', ( ) => {
 
     const nanoKey = nanoAssetKeyOverride || details.assetKey;
     nano.cf.update(nanoKey);
+    if ( nanoKey === nano.ub.userFiltersPath ) {
+        nano.fl.reset();
+        nano.fl.changed = true;
+    } else if ( nanoKey === nano.ub.nanoPartialUserFiltersPath ) {
+        nano.fl.line++;
+    }
 
     // Useful references:
     //    https://adblockplus.org/en/filter-cheatsheet
@@ -810,6 +820,10 @@ self.addEventListener('hiddenSettingsChanged', ( ) => {
     const lineIter = new this.LineIterator(this.processDirectives(rawText));
 
     while ( lineIter.eot() === false ) {
+        if ( nano.cf.first_party ) {
+            nano.fl.line++;
+        }
+
         let line = lineIter.next().trim();
         if ( line.length === 0 ) { continue; }
 
@@ -820,7 +834,11 @@ self.addEventListener('hiddenSettingsChanged', ( ) => {
 
         // Strip comments
         const c = line.charAt(0);
-        if ( c === '!' || c === '[' ) { continue; }
+        if ( c === '!' ) { continue; }
+        if ( c === '[' ) {
+            nano.flintw('nano_l_filter_comment_bracket');
+            continue;
+        }
 
         // Parse or skip cosmetic filters
         // All cosmetic filters are caught here
@@ -841,6 +859,7 @@ self.addEventListener('hiddenSettingsChanged', ( ) => {
         const pos = line.indexOf('#');
         if ( pos !== -1 && reIsWhitespaceChar.test(line.charAt(pos - 1)) ) {
             line = line.slice(0, pos).trim();
+            nano.flintw('nano_l_filter_inline_comment');
         }
 
         // https://github.com/gorhill/httpswitchboard/issues/15
@@ -850,15 +869,24 @@ self.addEventListener('hiddenSettingsChanged', ( ) => {
             // Ignore hosts file redirect configuration
             // 127.0.0.1 localhost
             // 255.255.255.255 broadcasthost
-            if ( reIsLocalhostRedirect.test(line) ) { continue; }
+            if ( reIsLocalhostRedirect.test(line) ) {
+                nano.flinte('nano_l_filter_localhost_entry');
+                continue;
+            }
             line = line.replace(reLocalIp, '').trim();
         }
 
-        if ( line.length === 0 ) { continue; }
+        if ( line.length === 0 ) {
+            nano.flinte('nano_l_filter_localhost_entry');
+            continue;
+        }
 
         staticNetFilteringEngine.compile(line, writer);
     }
 
+    if ( nano.cf.first_party ) {
+        nano.fl.cache_result();
+    }
     nano.cf.reset();
 
     return writer.toString();
