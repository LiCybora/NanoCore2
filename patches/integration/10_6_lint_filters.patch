diff --git a/src/js/cosmetic-filtering.js b/src/js/cosmetic-filtering.js
index 393b814c..b754d3ec 100644
--- a/src/js/cosmetic-filtering.js
+++ b/src/js/cosmetic-filtering.js
@@ -365,7 +365,7 @@ FilterContainer.prototype.compile = function(parsed, writer) {
         this.compileSpecificSelector(hostname, parsed, writer);
     }
     if ( applyGlobally ) {
-        this.compileGenericSelector(parsed, writer);
+        this.compileGenericSelector(parsed, writer, true);
     }
 
     return true;
@@ -385,7 +385,8 @@ FilterContainer.prototype.compileGenericSelector = function(parsed, writer) {
 
 FilterContainer.prototype.compileGenericHideSelector = function(
     parsed,
-    writer
+    writer,
+    nanoIsGlobal
 ) {
     const selector = parsed.suffix;
     const type = selector.charCodeAt(0);
@@ -439,6 +440,13 @@ FilterContainer.prototype.compileGenericHideSelector = function(
             type: 'error',
             text: `Invalid generic cosmetic filter in ${who}: ##${selector}`
         });
+        if ( compiled === undefined ) {
+            nano.flinte('nano_l_filter_bad_selector');
+        } else if ( nanoIsGlobal === true ) {
+            nano.flintw('nano_l_filter_converted_to_exception');
+        } else {
+            nano.flinte('nano_l_filter_too_expensive');
+        }
         return;
     }
 
@@ -500,6 +508,7 @@ FilterContainer.prototype.compileGenericUnhideSelector = function(
             type: 'error',
             text: `Invalid cosmetic filter in ${who}: #@#${parsed.suffix}`
         });
+        nano.flinte('nano_l_filter_bad_selector');
         return;
     }
 
@@ -534,6 +543,7 @@ FilterContainer.prototype.compileSpecificSelector = function(
             type: 'error',
             text: `Invalid cosmetic filter in ${who}: ##${parsed.suffix}`
         });
+        nano.flinte('nano_l_filter_bad_selector');
         return;
     }
 
diff --git a/src/js/html-filtering.js b/src/js/html-filtering.js
index 58a23b14..d87ea24b 100644
--- a/src/js/html-filtering.js
+++ b/src/js/html-filtering.js
@@ -293,6 +293,7 @@
                 type: 'error',
                 text: `Invalid HTML filter in ${who}: ##${selector}`
             });
+            nano.flinte('nano_l_filter_bad_selector');
             return;
         }
 
@@ -302,7 +303,10 @@
         // TODO: Mind negated hostnames, they are currently discarded.
 
         for ( const hn of parsed.hostnames ) {
-            if ( hn.charCodeAt(0) === 0x7E /* '~' */ ) { continue; }
+            if ( hn.charCodeAt(0) === 0x7E /* '~' */ ) {
+                nano.flintw('nano_l_filter_negated_html_filtering');
+                continue;
+            }
             let kind = 0;
             if ( parsed.exception ) {
                 kind |= 0b01;
diff --git a/src/js/redirect-engine.js b/src/js/redirect-engine.js
index c5afd71c..e94a033e 100644
--- a/src/js/redirect-engine.js
+++ b/src/js/redirect-engine.js
@@ -437,7 +437,13 @@ RedirectEngine.prototype.fromCompiledRule = function(line) {
 
 RedirectEngine.prototype.compileRuleFromStaticFilter = function(line) {
     const matches = this.reFilterParser.exec(line);
-    if ( matches === null || matches.length !== 4 ) { return; }
+    if ( matches === null || matches.length !== 4 ) {
+        nano.flintw(
+            'nano_r_does_not_match_re',
+            ['{{regexp}}', this.reFilterParser.toString()]
+        );
+        return;
+    }
 
     const des = matches[1] || '';
 
@@ -498,14 +504,20 @@ RedirectEngine.prototype.compileRuleFromStaticFilter = function(line) {
         }
         // One and only one type must be specified.
         if ( this.supportedTypes.has(option) ) {
-            if ( type !== undefined ) { return; }
+            if ( type !== undefined ) {
+                nano.flintw('nano_r_too_many_types');
+                return;
+            }
             type = this.supportedTypes.get(option);
             continue;
         }
     }
 
     // Need a resource token.
-    if ( redirect === '' ) { return; }
+    if ( redirect === '' ) {
+        nano.flintw('nano_r_no_resource_token');
+        return;
+    }
 
     // Need one single type -- not negated.
     if ( type === undefined ) {
@@ -514,6 +526,7 @@ RedirectEngine.prototype.compileRuleFromStaticFilter = function(line) {
         } else if ( redirect === 'noopmp4-1s' ) {
             type = 'media';
         } else {
+            nano.flintw('nano_r_no_supported_type');
             return;
         }
     }
@@ -529,12 +542,19 @@ RedirectEngine.prototype.compileRuleFromStaticFilter = function(line) {
     const out = [];
     for ( const srchn of srchns ) {
         if ( srchn === '' ) { continue; }
-        if ( srchn.startsWith('~') ) { continue; }
+        if ( srchn.startsWith('~') ) {
+            nano.flintw('nano_r_negated_domain');
+            continue;
+        }
         out.push(`${srchn}\t${deshn}\t${type}\t${pattern}\t${redirect}`);
     }
 
-    if ( out.length === 0 ) { return; }
+    if ( out.length === 0 ) {
+        nano.flintw('nano_r_no_destination');
+        return;
+    }
 
+    nano.fl.lint(nano.flintable.ResRedirect, redirect);
     return out;
 };
 
diff --git a/src/js/scriptlet-filtering.js b/src/js/scriptlet-filtering.js
index f614e019..63713dc7 100644
--- a/src/js/scriptlet-filtering.js
+++ b/src/js/scriptlet-filtering.js
@@ -289,12 +289,15 @@
 
         // Tokenless is meaningful only for exception filters.
         if ( normalized === '+js()' && parsed.exception === false ) {
+            nano.flinte('nano_l_filter_generic_js_in_block');
             return;
         }
 
         if ( parsed.hostnames.length === 0 ) {
             if ( parsed.exception ) {
                 writer.push([ 32, '', 1, normalized ]);
+            } else {
+                nano.flinte('nano_l_filter_too_expensive');
             }
             return;
         }
@@ -304,8 +307,10 @@
             !nano.cf.is_privileged &&
             nanoInjectArgs.startsWith(nano.privileged_assets_previx)
         ) {
+            nano.flinte('nano_l_filter_assets_access_violation');
             return;
         }
+        nano.fl.lint(nano.flintable.ResScriptInject, nanoInjectArgs);
 
         // https://github.com/gorhill/uBlock/issues/3375
         //   Ignore instances of exception filter with negated hostnames,
@@ -318,7 +323,10 @@
             }
             let kind = 0;
             if ( parsed.exception ) {
-                if ( negated ) { continue; }
+                if ( negated ) {
+                    nano.flintw('nano_l_filter_script_snippet_double_exception');
+                    continue;
+                }
                 kind |= 1;
             } else if ( negated ) {
                 kind |= 1;
diff --git a/src/js/static-ext-filtering.js b/src/js/static-ext-filtering.js
index f8adb9c1..46f9df70 100644
--- a/src/js/static-ext-filtering.js
+++ b/src/js/static-ext-filtering.js
@@ -785,14 +785,20 @@
         let cCode = raw.charCodeAt(rpos - 1);
         if ( cCode !== 0x23 /* '#' */ && cCode !== 0x40 /* '@' */ ) {
             // Adguard's scriptlet injection: not supported.
-            if ( cCode === 0x25 /* '%' */ ) { return true; }
+            if ( cCode === 0x25 /* '%' */ ) {
+                nano.flinte('nano_l_filter_ag_js_injection');
+                return true;
+            }
             if ( cCode === 0x3F /* '?' */ && anchorLen > 2 ) {
                 cCode = raw.charCodeAt(rpos - 2);
             }
             // Adguard's style injection: translate to uBO's format.
             if ( cCode === 0x24 /* '$' */ ) {
                 suffix = translateAdguardCSSInjectionFilter(suffix);
-                if ( suffix === '' ) { return true; }
+                if ( suffix === '' ) {
+                    nano.flinte('nano_l_filter_style_injection_syntax_error');
+                    return true;
+                }
                 parsed.suffix = suffix;
             }
         }
@@ -815,6 +821,7 @@
                 suffix = parsed.suffix = '+js' + suffix.slice(13);
             } else if ( suffix.startsWith('script:contains') ) {
                 suffix = parsed.suffix = '^script:has-text' + suffix.slice(15);
+                nano.flintw('nano_l_filter_script_contains');
             }
         }
 
diff --git a/src/js/static-net-filtering.js b/src/js/static-net-filtering.js
index 7c7850cd..7e6a67fd 100644
--- a/src/js/static-net-filtering.js
+++ b/src/js/static-net-filtering.js
@@ -1988,6 +1988,7 @@ FilterParser.prototype.parseOptions = function(s) {
             this.domainOpt = this.parseDomainOption(opt.slice(7));
             if ( this.domainOpt === '' ) {
                 this.unsupported = true;
+                nano.flinte('nano_l_filter_bad_domain_option_arguments');
                 break;
             }
             continue;
@@ -1999,6 +2000,7 @@ FilterParser.prototype.parseOptions = function(s) {
         if ( /^redirect(?:-rule)?=/.test(opt) ) {
             if ( this.redirect !== 0 ) {
                 this.unsupported = true;
+                nano.flinte('nano_r_redirected_twice');
                 break;
             }
             this.redirect = opt.charCodeAt(8) === 0x3D /* '=' */ ? 1 : 2;
@@ -2024,6 +2026,7 @@ FilterParser.prototype.parseOptions = function(s) {
         if ( opt === 'empty' || opt === 'mp4' ) {
             if ( this.redirect !== 0 ) {
                 this.unsupported = true;
+                nano.flinte('nano_r_redirected_twice');
                 break;
             }
             this.redirect = 1;
@@ -2040,12 +2043,24 @@ FilterParser.prototype.parseOptions = function(s) {
         }
         // Unrecognized filter option: ignore whole filter.
         this.unsupported = true;
+        if (
+            opt.startsWith('csp=') &&
+            (
+                opt.length === 4 ||
+                this.reBadCSP.test(opt)
+            )
+        ) {
+            nano.flinte('nano_l_filter_bad_csp_option_arguments');
+        } else {
+            nano.flinte('nano_l_filter_unknown_option', ['{{option}}', opt]);
+        }
         break;
     }
 
     // Redirect rules can't be exception filters.
     if ( this.redirect !== 0 && this.action !== BlockAction ) {
         this.unsupported = true;
+        nano.flinte('nano_r_redirect_in_exception');
     }
 
     // Negated network types? Toggle on all network type bits.
@@ -2057,6 +2072,7 @@ FilterParser.prototype.parseOptions = function(s) {
         this.types &= ~this.notTypes;
         if ( this.types === 0 ) {
             this.unsupported = true;
+            nano.flinte('nano_l_filter_no_type');
         }
     }
 
@@ -2067,6 +2083,9 @@ FilterParser.prototype.parseOptions = function(s) {
         this.types &= ~unsupportedTypeBit;
         if ( this.types === 0 ) {
             this.unsupported = true;
+            nano.flinte('nano_l_filter_only_unsupported_type');
+        } else {
+            nano.flintw('nano_l_filter_unsupported_type_ignored');
         }
     }
 };
@@ -2093,6 +2112,7 @@ FilterParser.prototype.parse = function(raw) {
     // as unsupported.
     if ( s.length === 1 && /[0-9a-z]/i.test(s) ) {
         this.unsupported = true;
+        nano.flinte('nano_l_filter_too_short');
         return this;
     }
 
@@ -2111,6 +2131,7 @@ FilterParser.prototype.parse = function(raw) {
         if ( c === '#' || c === '@' ) {
             console.error('static-net-filtering.js > unexpected cosmetic filters');
             this.elemHiding = true;
+            nano.flinte('nano_b_cosmetic_filter_passed_through');
             return this;
         }
     }
@@ -2137,6 +2158,7 @@ FilterParser.prototype.parse = function(raw) {
             //   Discard Adguard-specific `$$` filters.
             if ( s.indexOf('$$') !== -1 ) {
                 this.unsupported = true;
+                nano.flinte('nano_l_filter_ag_element_remove');
                 return this;
             }
             this.parseOptions(s.slice(pos + 1));
@@ -2160,6 +2182,7 @@ FilterParser.prototype.parse = function(raw) {
                 normalizeRegexSource.message
             );
             this.unsupported = true;
+            nano.flinte('nano_l_filter_bad_re');
         }
         return this;
     }
@@ -2184,6 +2207,7 @@ FilterParser.prototype.parse = function(raw) {
         // https://github.com/chrisaljoudi/uBlock/issues/1096
         if ( s.startsWith('^') ) {
             this.unsupported = true;
+            nano.flinte('nano_l_filter_intervention_smed79');
             return this;
         }
 
@@ -2235,6 +2259,7 @@ FilterParser.prototype.parse = function(raw) {
     // TODO: remove once redirect rules with `*/*` pattern are no longer used.
     else if ( this.redirect !== 0 && s === '/' ) {
         s = '*';
+        nano.flintw('nano_r_simplified_to_star');
     }
 
     // https://github.com/gorhill/uBlock/issues/1047
diff --git a/src/js/storage.js b/src/js/storage.js
index f57d928f..c5c23d0b 100644
--- a/src/js/storage.js
+++ b/src/js/storage.js
@@ -413,7 +413,11 @@
     // https://github.com/gorhill/uBlock/issues/1022
     //   Be sure to end with an empty line.
     content = content.trim();
-    if ( content !== '' ) { content += '\n'; }
+    if ( content !== '' ) {
+        content += '\n';
+    } else {
+        nano.fl.clear_result();
+    }
     this.assets.put(this.userFiltersPath, content, callback);
     this.removeCompiledFilterList(this.userFiltersPath);
 };
@@ -860,6 +864,12 @@
 
     const nanoKey = nanoAssetKeyOverride || details.assetKey;
     nano.cf.update(nanoKey);
+    if ( nanoKey === nano.ub.userFiltersPath ) {
+        nano.fl.reset();
+        nano.fl.changed = true;
+    } else if ( nanoKey === nano.ub.nanoPartialUserFiltersPath ) {
+        nano.fl.line++;
+    }
 
     // Useful references:
     //    https://adblockplus.org/en/filter-cheatsheet
@@ -873,6 +883,10 @@
     const lineIter = new this.LineIterator(this.processDirectives(rawText));
 
     while ( lineIter.eot() === false ) {
+        if ( nano.cf.first_party ) {
+            nano.fl.line++;
+        }
+
         // rhill 2014-04-18: The trim is important here, as without it there
         // could be a lingering `\r` which would cause problems in the
         // following parsing code.
@@ -881,7 +895,11 @@
 
         // Strip comments
         const c = line.charAt(0);
-        if ( c === '!' || c === '[' ) { continue; }
+        if ( c === '!' ) { continue; }
+        if ( c === '[' ) {
+            nano.flintw('nano_l_filter_comment_bracket');
+            continue;
+        }
 
         // Parse or skip cosmetic filters
         // All cosmetic filters are caught here
@@ -902,6 +920,7 @@
         const pos = line.indexOf('#');
         if ( pos !== -1 && reIsWhitespaceChar.test(line.charAt(pos - 1)) ) {
             line = line.slice(0, pos).trim();
+            nano.flintw('nano_l_filter_inline_comment');
         }
 
         // https://github.com/gorhill/httpswitchboard/issues/15
@@ -911,15 +930,24 @@
             // Ignore hosts file redirect configuration
             // 127.0.0.1 localhost
             // 255.255.255.255 broadcasthost
-            if ( reIsLocalhostRedirect.test(line) ) { continue; }
+            if ( reIsLocalhostRedirect.test(line) ) {
+                nano.flinte('nano_l_filter_localhost_entry');
+                continue;
+            }
             line = line.replace(reLocalIp, '').trim();
         }
 
-        if ( line.length === 0 ) { continue; }
+        if ( line.length === 0 ) {
+            nano.flinte('nano_l_filter_localhost_entry');
+            continue;
+        }
 
         staticNetFilteringEngine.compile(line, writer);
     }
 
+    if ( nano.cf.first_party ) {
+        nano.fl.cache_result();
+    }
     nano.cf.reset();
 
     return writer.toString();
