diff --git a/src/js/cosmetic-filtering.js b/src/js/cosmetic-filtering.js
index dc2217dc..2ca3d0ab 100644
--- a/src/js/cosmetic-filtering.js
+++ b/src/js/cosmetic-filtering.js
@@ -542,7 +542,7 @@ FilterContainer.prototype.compile = function(parsed, writer) {
         this.compileSpecificSelector(hostname, parsed, writer);
     }
     if ( applyGlobally ) {
-        this.compileGenericSelector(parsed, writer);
+        this.compileGenericSelector(parsed, writer, true);
     }
 
     return true;
@@ -562,7 +562,8 @@ FilterContainer.prototype.compileGenericSelector = function(parsed, writer) {
 
 FilterContainer.prototype.compileGenericHideSelector = function(
     parsed,
-    writer
+    writer,
+    nanoIsGlobal
 ) {
     const selector = parsed.suffix;
     const type = selector.charCodeAt(0);
@@ -610,6 +611,13 @@ FilterContainer.prototype.compileGenericHideSelector = function(
             type: 'error',
             text: `Invalid generic cosmetic filter in ${who}: ##${selector}`
         });
+        if ( compiled === undefined ) {
+            nano.flinte('nano_l_filter_bad_selector');
+        } else if ( nanoIsGlobal === true ) {
+            nano.flintw('nano_l_filter_converted_to_exception');
+        } else {
+            nano.flinte('nano_l_filter_too_expensive');
+        }
         return;
     }
 
@@ -671,6 +679,7 @@ FilterContainer.prototype.compileGenericUnhideSelector = function(
             type: 'error',
             text: `Invalid cosmetic filter in ${who}: #@#${parsed.suffix}`
         });
+        nano.flinte('nano_l_filter_bad_selector');
         return;
     }
 
@@ -702,6 +711,7 @@ FilterContainer.prototype.compileSpecificSelector = function(
             type: 'error',
             text: `Invalid cosmetic filter in ${who}: ##${parsed.suffix}`
         });
+        nano.flinte('nano_l_filter_bad_selector');
         return;
     }
 
diff --git a/src/js/html-filtering.js b/src/js/html-filtering.js
index 3747bb72..8b83b376 100644
--- a/src/js/html-filtering.js
+++ b/src/js/html-filtering.js
@@ -248,6 +248,7 @@
                 type: 'error',
                 text: `Invalid HTML filter in ${who}: ##${selector}`
             });
+            nano.flinte('nano_l_filter_bad_selector');
             return;
         }
 
@@ -257,7 +258,10 @@
         // TODO: Mind negated hostnames, they are currently discarded.
 
         for ( const hn of parsed.hostnames ) {
-            if ( hn.charCodeAt(0) === 0x7E /* '~' */ ) { continue; }
+            if ( hn.charCodeAt(0) === 0x7E /* '~' */ ) {
+                nano.flintw('nano_l_filter_negated_html_filtering');
+                continue;
+            }
             let hash = µb.staticExtFilteringEngine.compileHostnameToHash(hn);
             if ( parsed.exception ) {
                 hash |= 0b0001;
diff --git a/src/js/redirect-engine.js b/src/js/redirect-engine.js
index b94966c9..c72d18c7 100644
--- a/src/js/redirect-engine.js
+++ b/src/js/redirect-engine.js
@@ -300,7 +300,13 @@ RedirectEngine.prototype.fromCompiledRule = function(line) {
 
 RedirectEngine.prototype.compileRuleFromStaticFilter = function(line) {
     const matches = this.reFilterParser.exec(line);
-    if ( matches === null || matches.length !== 4 ) { return; }
+    if ( matches === null || matches.length !== 4 ) {
+        nano.flintw(
+            'nano_r_does_not_match_re',
+            ['{{regexp}}', this.reFilterParser.toString()]
+        );
+        return;
+    }
 
     let des = matches[1] || '';
     const pattern = (des + matches[2]).replace(/[.+?{}()|[\]\/\\]/g, '\\$&')
@@ -324,17 +330,26 @@ RedirectEngine.prototype.compileRuleFromStaticFilter = function(line) {
         }
         // One and only one type must be specified.
         if ( this.supportedTypes.has(option) ) {
-            if ( type !== undefined ) { return; }
+            if ( type !== undefined ) {
+                nano.flintw('nano_r_too_many_types');
+                return;
+            }
             type = this.supportedTypes.get(option);
             continue;
         }
     }
 
     // Need a resource token.
-    if ( redirect === '' ) { return; }
+    if ( redirect === '' ) {
+        nano.flintw('nano_r_no_resource_token');
+        return;
+    }
 
     // Need one single type -- not negated.
-    if ( type === undefined ) { return; }
+    if ( type === undefined ) {
+        nano.flintw('nano_r_no_supported_type');
+        return;
+    }
 
     if ( des === '' ) {
         des = '*';
@@ -347,10 +362,19 @@ RedirectEngine.prototype.compileRuleFromStaticFilter = function(line) {
     const out = [];
     for ( const src of srcs ) {
         if ( src === '' ) { continue; }
-        if ( src.startsWith('~') ) { continue; }
+        if ( src.startsWith('~') ) {
+            nano.flintw('nano_r_negated_domain');
+            continue;
+        }
         out.push(src + '\t' + des + '\t' + type + '\t' + pattern + '\t' + redirect);
     }
 
+    if ( out.length === 0 ) {
+        nano.flintw('nano_r_no_destination');
+    } else {
+        nano.fl.lint(nano.flintable.ResRedirect, redirect);
+    }
+
     return out;
 };
 
diff --git a/src/js/scriptlet-filtering.js b/src/js/scriptlet-filtering.js
index ac43aece..f51c6b27 100644
--- a/src/js/scriptlet-filtering.js
+++ b/src/js/scriptlet-filtering.js
@@ -252,6 +252,8 @@
         if ( parsed.hostnames.length === 0 ) {
             if ( parsed.exception ) {
                 writer.push([ 32, 0 | 0b0001, '', parsed.suffix ]);
+            } else {
+                nano.flinte('nano_l_filter_too_expensive');
             }
             return;
         }
@@ -261,8 +263,10 @@
             !nano.cf.is_privileged &&
             nanoInjectArgs.startsWith(nano.privileged_assets_previx)
         ) {
+            nano.flinte('nano_l_filter_assets_access_violation');
             return;
         }
+        nano.fl.lint(nano.flintable.ResScriptInject, nanoInjectArgs);
 
         // https://github.com/gorhill/uBlock/issues/3375
         //   Ignore instances of exception filter with negated hostnames,
@@ -275,7 +279,10 @@
             }
             let hash = µb.staticExtFilteringEngine.compileHostnameToHash(hn);
             if ( parsed.exception ) {
-                if ( negated ) { continue; }
+                if ( negated ) {
+                    nano.flintw('nano_l_filter_script_snippet_double_exception');
+                    continue;
+                }
                 hash |= 0b0001;
             } else if ( negated ) {
                 hash |= 0b0001;
diff --git a/src/js/static-ext-filtering.js b/src/js/static-ext-filtering.js
index 4c41f7b1..8ce6b22a 100644
--- a/src/js/static-ext-filtering.js
+++ b/src/js/static-ext-filtering.js
@@ -787,14 +787,20 @@
         let cCode = raw.charCodeAt(rpos - 1);
         if ( cCode !== 0x23 /* '#' */ && cCode !== 0x40 /* '@' */ ) {
             // Adguard's scriptlet injection: not supported.
-            if ( cCode === 0x25 /* '%' */ ) { return true; }
+            if ( cCode === 0x25 /* '%' */ ) {
+                nano.flinte('nano_l_filter_ag_js_injection');
+                return true;
+            }
             if ( cCode === 0x3F /* '?' */ && anchorLen > 2 ) {
                 cCode = raw.charCodeAt(rpos - 2);
             }
             // Adguard's style injection: translate to uBO's format.
             if ( cCode === 0x24 /* '$' */ ) {
                 suffix = translateAdguardCSSInjectionFilter(suffix);
-                if ( suffix === '' ) { return true; }
+                if ( suffix === '' ) {
+                    nano.flinte('nano_l_filter_style_injection_syntax_error');
+                    return true;
+                }
                 parsed.suffix = suffix;
             }
         }
@@ -817,6 +823,7 @@
                 suffix = parsed.suffix = '+js' + suffix.slice(13);
             } else if ( suffix.startsWith('script:contains') ) {
                 suffix = parsed.suffix = '^script:has-text' + suffix.slice(15);
+                nano.flintw('nano_l_filter_script_contains');
             }
         }
 
diff --git a/src/js/static-net-filtering.js b/src/js/static-net-filtering.js
index 0d326e2e..8cf12c68 100644
--- a/src/js/static-net-filtering.js
+++ b/src/js/static-net-filtering.js
@@ -1842,6 +1842,10 @@ FilterParser.prototype.parseTypeOption = function(raw, not) {
 
     // Non-discrete network types can't be negated.
     if ( (typeBit & this.allNetRequestTypeBits) === 0 ) {
+        nano.flintw(
+            'nano_l_filter_discarded_non_negatable_type',
+            ['{{type}}', raw]
+        );
         return;
     }
 
@@ -1912,6 +1916,7 @@ FilterParser.prototype.parseOptions = function(s) {
                 continue;
             }
             this.unsupported = true;
+            nano.flinte('nano_l_filter_negated_generichide');
             break;
         }
         // Test before handling all other types.
@@ -1921,6 +1926,7 @@ FilterParser.prototype.parseOptions = function(s) {
                 continue;
             }
             this.unsupported = true;
+            nano.flinte('nano_r_redirect_in_exception');
             break;
         }
         if ( this.toNormalizedType.hasOwnProperty(opt) ) {
@@ -1934,6 +1940,7 @@ FilterParser.prototype.parseOptions = function(s) {
             this.domainOpt = this.parseDomainOption(opt.slice(7));
             if ( this.domainOpt === '' ) {
                 this.unsupported = true;
+                nano.flinte('nano_l_filter_bad_domain_option_arguments');
                 break;
             }
             continue;
@@ -1951,6 +1958,8 @@ FilterParser.prototype.parseOptions = function(s) {
                 this.parseTypeOption('data', not);
                 this.dataType = 'csp';
                 this.dataStr = opt.slice(4).trim();
+            } else {
+                nano.flinte('nano_l_filter_bad_csp_option_arguments');
             }
             continue;
         }
@@ -1965,6 +1974,8 @@ FilterParser.prototype.parseOptions = function(s) {
             this.fopts = opts.join(',');
             var pos = this.raw.lastIndexOf('$');
             this.raw = this.raw.slice(0, pos + 1) + this.fopts;
+            nano.flintw('nano_l_filter_expanded_mp4_option');
+            nano.flintw('nano_l_filter_mp4_option');
             continue;
         }
         // https://github.com/uBlockOrigin/uAssets/issues/192
@@ -1978,6 +1989,7 @@ FilterParser.prototype.parseOptions = function(s) {
         }
         // Unrecognized filter option: ignore whole filter.
         this.unsupported = true;
+        nano.flinte('nano_l_filter_unknown_option', ['{{option}}', opt]);
         break;
     }
 };
@@ -2015,6 +2027,7 @@ FilterParser.prototype.parse = function(raw) {
         if ( c === '#' || c === '@' ) {
             console.error('static-net-filtering.js > unexpected cosmetic filters');
             this.elemHiding = true;
+            nano.flinte('nano_b_cosmetic_filter_passed_through');
             return this;
         }
     }
@@ -2041,6 +2054,7 @@ FilterParser.prototype.parse = function(raw) {
             //   Discard Adguard-specific `$$` filters.
             if ( s.indexOf('$$') !== -1 ) {
                 this.unsupported = true;
+                nano.flinte('nano_l_filter_ag_element_remove');
                 return this;
             }
             this.parseOptions(s.slice(pos + 1));
@@ -2051,7 +2065,10 @@ FilterParser.prototype.parse = function(raw) {
                 this.types &= ~this.unsupportedTypeBit;
                 if ( this.types === 0 ) {
                     this.unsupported = true;
+                    nano.flinte('nano_l_filter_only_unsupported_type');
                     return this;
+                } else {
+                    nano.flintw('nano_l_filter_unsupported_type_ignored');
                 }
             }
             s = s.slice(0, pos);
@@ -2073,6 +2090,7 @@ FilterParser.prototype.parse = function(raw) {
                 normalizeRegexSource.message
             );
             this.unsupported = true;
+            nano.flinte('nano_l_filter_bad_re');
         }
         return this;
     }
@@ -2097,6 +2115,7 @@ FilterParser.prototype.parse = function(raw) {
         // https://github.com/chrisaljoudi/uBlock/issues/1096
         if ( s.startsWith('^') ) {
             this.unsupported = true;
+            nano.flinte('nano_l_filter_intervention_smed79');
             return this;
         }
 
@@ -2697,6 +2716,9 @@ FilterContainer.prototype.compileToAtomicFilter = function(
     // Typeless
     if ( type === 0 ) {
         writer.push([ descBits, parsed.tokenHash, fdata ]);
+        if ( parsed.redirect ) {
+            nano.flintw('nano_r_no_type');
+        }
         return;
     }
 
diff --git a/src/js/storage.js b/src/js/storage.js
index 8838355b..42f26c9c 100644
--- a/src/js/storage.js
+++ b/src/js/storage.js
@@ -414,7 +414,11 @@
     // https://github.com/gorhill/uBlock/issues/1022
     // Be sure to end with an empty line.
     content = content.trim();
-    if ( content !== '' ) { content += '\n'; }
+    if ( content !== '' ) {
+        content += '\n';
+    } else {
+        nano.fl.clear_result();
+    }
     this.assets.put(this.userFiltersPath, content, callback);
     this.removeCompiledFilterList(this.userFiltersPath);
 };
@@ -858,6 +862,12 @@
 
     const nanoKey = nanoAssetKeyOverride || details.assetKey;
     nano.cf.update(nanoKey);
+    if ( nanoKey === nano.ub.userFiltersPath ) {
+        nano.fl.reset();
+        nano.fl.changed = true;
+    } else if ( nanoKey === nano.ub.nanoPartialUserFiltersPath ) {
+        nano.fl.line++;
+    }
 
     // Useful references:
     //    https://adblockplus.org/en/filter-cheatsheet
@@ -871,6 +881,10 @@
     const lineIter = new this.LineIterator(this.processDirectives(rawText));
 
     while ( lineIter.eot() === false ) {
+        if ( nano.cf.first_party ) {
+            nano.fl.line++;
+        }
+
         // rhill 2014-04-18: The trim is important here, as without it there
         // could be a lingering `\r` which would cause problems in the
         // following parsing code.
@@ -879,7 +893,11 @@
 
         // Strip comments
         const c = line.charAt(0);
-        if ( c === '!' || c === '[' ) { continue; }
+        if ( c === '!' ) { continue; }
+        if ( c === '[' ) {
+            nano.flintw('nano_l_filter_comment_bracket');
+            continue;
+        }
 
         // Parse or skip cosmetic filters
         // All cosmetic filters are caught here
@@ -900,6 +918,7 @@
         const pos = line.indexOf('#');
         if ( pos !== -1 && reIsWhitespaceChar.test(line.charAt(pos - 1)) ) {
             line = line.slice(0, pos).trim();
+            nano.flintw('nano_l_filter_inline_comment');
         }
 
         // https://github.com/gorhill/httpswitchboard/issues/15
@@ -909,15 +928,24 @@
             // Ignore hosts file redirect configuration
             // 127.0.0.1 localhost
             // 255.255.255.255 broadcasthost
-            if ( reIsLocalhostRedirect.test(line) ) { continue; }
+            if ( reIsLocalhostRedirect.test(line) ) {
+                nano.flinte('nano_l_filter_localhost_entry');
+                continue;
+            }
             line = line.replace(reLocalIp, '').trim();
         }
 
-        if ( line.length === 0 ) { continue; }
+        if ( line.length === 0 ) {
+            nano.flinte('nano_l_filter_localhost_entry');
+            continue;
+        }
 
         staticNetFilteringEngine.compile(line, writer);
     }
 
+    if ( nano.cf.first_party ) {
+        nano.fl.cache_result();
+    }
     nano.cf.reset();
 
     return writer.toString();
