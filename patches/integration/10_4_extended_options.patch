diff --git a/src/js/redirect-engine.js b/src/js/redirect-engine.js
index 6e8cefd4..b94966c9 100644
--- a/src/js/redirect-engine.js
+++ b/src/js/redirect-engine.js
@@ -370,6 +370,8 @@ RedirectEngine.prototype.supportedTypes = new Map([
     [ 'subdocument', 'sub_frame' ],
     [ 'xhr', 'xmlhttprequest' ],
     [ 'xmlhttprequest', 'xmlhttprequest' ],
+
+    [ 'iframe', 'sub_frame' ],
 ]);
 
 /******************************************************************************/
diff --git a/src/js/static-net-filtering.js b/src/js/static-net-filtering.js
index a322fb23..0d326e2e 100644
--- a/src/js/static-net-filtering.js
+++ b/src/js/static-net-filtering.js
@@ -1786,7 +1786,10 @@ FilterParser.prototype.toNormalizedType = {
                'xhr': 'xmlhttprequest',
     'xmlhttprequest': 'xmlhttprequest',
             'webrtc': 'unsupported',
-         'websocket': 'websocket'
+         'websocket': 'websocket',
+
+             'ghide': 'generichide',
+            'iframe': 'subdocument',
 };
 
 /******************************************************************************/
@@ -1903,7 +1906,7 @@ FilterParser.prototype.parseOptions = function(s) {
         // https://issues.adblockplus.org/ticket/616
         // `generichide` concept already supported, just a matter of
         // adding support for the new keyword.
-        if ( opt === 'elemhide' || opt === 'generichide' ) {
+        if ( opt === 'generichide' || opt === 'ghide' || opt === 'elemhide' ) {
             if ( not === false ) {
                 this.parseTypeOption('generichide', false);
                 continue;
@@ -1957,8 +1960,11 @@ FilterParser.prototype.parseOptions = function(s) {
             this.dataStr = '';
             continue;
         }
-        // Used by Adguard, purpose is unclear -- just ignore for now.
-        if ( opt === 'empty' ) {
+        if ( opt === 'mp4' ) {
+            opts.push('media', 'redirect=noopmp4-1s');
+            this.fopts = opts.join(',');
+            var pos = this.raw.lastIndexOf('$');
+            this.raw = this.raw.slice(0, pos + 1) + this.fopts;
             continue;
         }
         // https://github.com/uBlockOrigin/uAssets/issues/192
