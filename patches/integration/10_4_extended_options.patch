diff --git a/src/js/redirect-engine.js b/src/js/redirect-engine.js
index 8b106449..f6880985 100644
--- a/src/js/redirect-engine.js
+++ b/src/js/redirect-engine.js
@@ -322,7 +322,7 @@ RedirectEngine.prototype.compileRuleFromStaticFilter = function(line) {
             srcs = option.slice(7).split('|');
             continue;
         }
-        if ( option === 'first-party' ) {
+        if ( option === 'first-party' || option === '1p' ) {
             srcs.push(Âµburi.domainFromHostnameNoCache(des) || des);
             continue;
         }
@@ -384,6 +384,12 @@ RedirectEngine.prototype.supportedTypes = (function() {
     types.stylesheet = 'stylesheet';
     types.subdocument = 'sub_frame';
     types.xmlhttprequest = 'xmlhttprequest';
+
+    types.css = 'stylesheet';
+    types.frame = 'sub_frame';
+    types.iframe = 'sub_frame';
+    types.xhr = 'xmlhttprequest';
+
     return types;
 })();
 
diff --git a/src/js/static-net-filtering.js b/src/js/static-net-filtering.js
index 197eebd6..f462904c 100644
--- a/src/js/static-net-filtering.js
+++ b/src/js/static-net-filtering.js
@@ -1383,7 +1383,10 @@ FilterParser.prototype.toNormalizedType = {
                'xhr': 'xmlhttprequest',
     'xmlhttprequest': 'xmlhttprequest',
             'webrtc': 'unsupported',
-         'websocket': 'websocket'
+         'websocket': 'websocket',
+
+             'ghide': 'generichide',
+            'iframe': 'subdocument',
 };
 
 /******************************************************************************/
@@ -1501,7 +1504,7 @@ FilterParser.prototype.parseOptions = function(s) {
         // https://issues.adblockplus.org/ticket/616
         // `generichide` concept already supported, just a matter of
         // adding support for the new keyword.
-        if ( opt === 'elemhide' || opt === 'generichide' ) {
+        if ( opt === 'generichide' || opt === 'ghide' || opt === 'elemhide' ) {
             if ( not === false ) {
                 this.parseTypeOption('generichide', false);
                 continue;
@@ -1555,8 +1558,11 @@ FilterParser.prototype.parseOptions = function(s) {
             this.dataStr = '';
             continue;
         }
-        // Used by Adguard, purpose is unclear -- just ignore for now.
-        if ( opt === 'empty' ) {
+        if ( opt === 'mp4' ) {
+            opts.push('media', 'redirect=noopmp4-1s');
+            this.fopts = opts.join(',');
+            var pos = this.raw.lastIndexOf('$');
+            this.raw = this.raw.slice(0, pos + 1) + this.fopts;
             continue;
         }
         // https://github.com/uBlockOrigin/uAssets/issues/192
